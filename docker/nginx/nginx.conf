# Загружаем динамически модуль, сделано так для удобства,
# лучше nginx собирать сразу со всеми нужными модуля
load_module /etc/nginx/modules/ngx_http_image_filter_module.so;

# Пользователь и группа, от имени которых будет запущен рабочий процесс
user nginx nginx;

worker_processes 1;

# [ debug | info | notice | warn | error | crit ]
error_log /var/log/nginx/error.log info;

events {
    # Максимальное количество соединений одного воркера
    worker_connections 1024;
}

http {

    # Указываем файл с mime-типами и указываем тип данных по-умолчанию
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] '
                   '"$request" $status $bytes_sent '
                   '"$http_referer" "$http_user_agent" "$gzip_ratio" '
                   '"$request_time" "$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Отключить вывод версии nginx в ответе
    server_tokens off;

    # Метод отправки данных sendfile эффективнее чем read+write
    sendfile on;

    # Отправлять заголовки и и начало файла в одном пакете
    tcp_nopush  on;
    tcp_nodelay on;

    gzip             on;
    gzip_min_length  1100;
    gzip_buffers     4 8k;
    gzip_types       text/plain application/xml;

    # Задаёт параметры зоны разделяемой памяти,
    # где ключем выступает ip-адрес,
    # ограничение на скорость обработки запросов
    # равно 10 запросов в секунду с одного ip
    limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s;
    #proxy_cache_path /project/cache/imgcache levels=1 keys_zone=resized:1m max_size=256m;

    include /var/www/shortener/docker/nginx/project.conf;
}